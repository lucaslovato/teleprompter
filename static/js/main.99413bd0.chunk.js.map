{"version":3,"sources":["App/TextScroller/TextScroller.module.css","App/Slider/index.js","App/TextScroller/index.js","App/index.js","registerServiceWorker.js","index.js","App/Slider/Slider.module.css","App/App.module.css"],"names":["module","exports","displayText","displayTextContainer","flipX","theme","getMuiTheme","darkBaseTheme","sliderStyle","margin","Slider","props","react_default","a","createElement","material_ui_styles","muiTheme","className","styles","sliderContainer","material_ui_index_es","Object","assign","TextScroller","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scroll","scrollDurationLine","refDisplayText","current","numLines","getClientRects","length","_displayText$getBound","getBoundingClientRect","top","height","bottom","window","scrollY","Scroll","animateScroll","scrollTo","duration","smooth","offset","React","createRef","_this$props","text","fontSize","width","classNames","defineProperty","style","ref","PureComponent","defaultProps","App","onFullScreenButtonClick","screenfull","enabled","request","onStartButtonClick","refTextScroller","onTextInputChange","event","setState","target","value","onFontSizeInputChange","onSpeedInputChange","scrollSpeed","onFlipXSwitchChange","checked","state","refApp","_this$state","app","header","controls","core_index_es","control","placeholder","onChange","label","icons_index_es","min","max","transform","onClick","variant","size","githubLink","href","rel","index_es","icon","faGithub","TextScroller_TextScroller","concat","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","createMuiTheme","palette","type","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.99413bd0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayText\":\"TextScroller_displayText__23QLK\",\"displayTextContainer\":\"TextScroller_displayTextContainer__3jR-R\",\"flipX\":\"TextScroller_flipX__3Ootl\"};","// TODO: Replace this class with Slider implementation coming in v1 (https://github.com/mui-org/material-ui/issues/4793)\n\nimport React from 'react'\nimport {Slider as SliderV0} from 'material-ui'\nimport {darkBaseTheme, getMuiTheme, MuiThemeProvider} from 'material-ui/styles'\nimport styles from './Slider.module.css'\n\nconst theme = getMuiTheme(darkBaseTheme);\nconst sliderStyle = {margin: 0};\n\nexport default (props) => <MuiThemeProvider muiTheme={theme}>\n    <div className={styles.sliderContainer}>\n        <SliderV0 sliderStyle={sliderStyle} {...props}/>\n    </div>\n</MuiThemeProvider>;","import classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport React, {PureComponent} from 'react'\nimport Scroll from 'react-scroll'\nimport styles from './TextScroller.module.css'\n\nexport default class TextScroller extends PureComponent {\n    static propTypes = {\n        text: PropTypes.string,\n        fontSize: PropTypes.string,\n        flipX: PropTypes.bool,\n        width: PropTypes.string,\n        height: PropTypes.string,\n        scrollDurationLine: PropTypes.number\n    };\n\n    static defaultProps = {\n        text: '',\n        fontSize: 'xx-large',\n        flipX: false,\n        width: 'auto',\n        height: 'auto',\n        scrollDurationLine: 1000\n    };\n    scroll = () => {\n        const {scrollDurationLine} = this.props;\n        const displayText = this.refDisplayText.current;\n        const numLines = displayText.getClientRects().length;\n        const {top, height} = displayText.getBoundingClientRect();\n\n        const bottom = window.scrollY + top + height;\n\n        Scroll.animateScroll.scrollTo(bottom, {\n            duration: scrollDurationLine * numLines,\n            smooth: 'linear',\n            offset: height\n        });\n    };\n\n    constructor() {\n        super();\n        this.refDisplayText = React.createRef();\n    }\n\n    render() {\n        const {text, fontSize, flipX, width, height} = this.props;\n\n        return <div className={classNames(styles.displayTextContainer, {[styles.flipX]: flipX})}\n                    style={{width: width, height: height}}>\n            <p ref={this.refDisplayText}\n               className={styles.displayText}\n               style={{fontSize: fontSize}}>\n                {text}\n            </p>\n        </div>\n    }\n}","import React, {Component} from 'react'\nimport screenfull from 'screenfull'\nimport FontAwesomeIcon from '@fortawesome/react-fontawesome'\nimport {faGithub} from '@fortawesome/fontawesome-free-brands'\nimport {Button, FormControlLabel, Switch, TextField} from '@material-ui/core'\nimport {Description, FastForward, Fullscreen, SwapHoriz, TextFields} from '@material-ui/icons'\n\nimport styles from './App.module.css'\nimport Slider from './Slider'\nimport TextScroller from './TextScroller'\n\nexport default class App extends Component {\n    onFullScreenButtonClick = () => {\n        if (screenfull.enabled) {\n            screenfull.request();\n        }\n    };\n    onStartButtonClick = () => {\n        this.refTextScroller.current.scroll()\n    };\n    onTextInputChange = (event) => {\n        this.setState({text: event.target.value})\n    };\n    onFontSizeInputChange = (event, value) => {\n        this.setState({fontSize: value})\n    };\n    onSpeedInputChange = (event, value) => {\n        this.setState({scrollSpeed: value})\n    };\n    onFlipXSwitchChange = (event) => {\n        this.setState({flipX: event.target.checked})\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: '',\n            fontSize: .5,\n            scrollSpeed: .5,\n            flipX: false\n        };\n\n        this.refTextScroller = React.createRef();\n        this.refApp = React.createRef();\n    }\n\n    render() {\n        const {text, fontSize, scrollSpeed, flipX} = this.state;\n\n        return <div ref={this.refApp} className={styles.app}>\n            <header className={styles.header}>\n                <div className={styles.controls}>\n                    <FormControlLabel\n                        control={\n                            <TextField\n                                placeholder='Enter script.'\n                                value={text}\n                                onChange={this.onTextInputChange}/>\n                        }\n                        label={<Description/>}/>\n                    <FormControlLabel\n                        control={<Slider min={0} max={1} value={scrollSpeed} onChange={this.onSpeedInputChange}/>}\n                        label={<FastForward/>}/>\n                    <FormControlLabel\n                        control={<Slider min={0} max={1} value={fontSize} onChange={this.onFontSizeInputChange}/>}\n                        label={<TextFields style={{transform: 'scaleX(-1)'}}/>}/>\n                    <FormControlLabel\n                        control={<Switch onChange={this.onFlipXSwitchChange}/>}\n                        label={<SwapHoriz/>}/>\n                    <Button onClick={this.onStartButtonClick} variant='raised'>Start</Button>\n                    <Button onClick={this.onFullScreenButtonClick} size='small' variant='raised'><Fullscreen/></Button>\n                    <a className={styles.githubLink}\n                       href='https://github.com/kevinhwang/teleprompter'\n                       target='_blank'\n                       rel='noopener noreferrer'>\n                        <FontAwesomeIcon icon={faGithub}/>\n                    </a>\n                </div>\n            </header>\n            <TextScroller\n                ref={this.refTextScroller}\n                text={text}\n                fontSize={`${(6 * fontSize) + 2}em`}\n                flipX={flipX}\n                scrollDurationLine={8000 * (1 - scrollSpeed) + 192}/>\n        </div>\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import {createMuiTheme, MuiThemeProvider} from '@material-ui/core/styles'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport registerServiceWorker from './registerServiceWorker'\n\nconst theme = createMuiTheme({palette: {type: 'dark'}});\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <App/>\n    </MuiThemeProvider>,\n    document.getElementById('root'));\nregisterServiceWorker();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sliderContainer\":\"Slider_sliderContainer__H7tem\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"githubLink\":\"App_githubLink__3pOGo\",\"app\":\"App_app__2vZIS\",\"controls\":\"App_controls__3smyb\",\"header\":\"App_header__kAu2Q\"};"],"sourceRoot":""}